const hintDelta = 1080000;
const transformers = new Array( 3 );
// NER Hint constants
const $numeric_year = 44; // eslint-disable-line camelcase
const $numeric_value = 45; // eslint-disable-line camelcase
const $ordinal_value = 46; // eslint-disable-line camelcase
const $time = 47; // eslint-disable-line camelcase
const $date = 48; // eslint-disable-line camelcase
const $tab_crlf = 49; // eslint-disable-line camelcase
const $time_hh_mm = 50; // eslint-disable-line camelcase
// Numeric date regexes.
var rgxDDMMYY = /^(?:0?[1-9]|[12]\d|30|31)[/.-](?:0?[1-9]|1[0-2])(?:[/.-]([12]\d)?\d\d)$/;
var rgxMMDDYY = /^(?:0?[1-9]|1[0-2])[/.-](?:0?[1-9]|[12]\d|30|31)(?:[/.-]([12]\d)?\d\d)$/;
var rgxISODate = /^(?:[12]\d\d\d)[/.-](?:0?[1-9]|1[0-2])[/.-](?:0?[1-9]|[12]\d|30|31)$/;
// Numeric time regexes.
var rgxHHMM = /^(?:\d|[01]\d|2[0-3]):(?:\d|[0-5][0-9])$/;
// To avoid number false positives inn a token due to period/comma.
var rgxPeriodComma = /[,.]/g;
// To allow comma in a number before decimal sign.
var rgxCommaB4Period = /,(?=.*?\.)/g;
var rgxComma = /,/g;
var rgxPeriod = /\./;

// First Pass
transformers[ 0 ] = function ( token, cache ) {
  const tv = cache.value(token);
  // NOTE: `tv` can be undefined if the incoming `token` has been swapped by
  // an intermediate entity detected in the previous pass. Therefore if it is
  // `undefined` let it passthru.
  if ( tv === undefined ) return token;
  // Means `tv` has a defined value implying that it is a true token.
  if ( tv === '\n' || tv === '\n\n' || tv.replace( rgxPeriodComma, '' ) === '' ) return token;
  var mapped = cache.property( token, 'nerHint' );
  if ( mapped ) return mapped + hintDelta;
  var tokenType = cache.property( token, 'tokenType' );
  switch ( tokenType ) {
    case 'number':
      // Replace all commas by nothing before the period sign.
      var num = +( ( rgxPeriod.test( tv ) ) ? tv.replace( rgxCommaB4Period, '' ) : tv.replace( rgxComma, '') );
      if ( isNaN( num ) ) {
        if ( rgxDDMMYY.test( tv ) ) return hintDelta + $date;
        if ( rgxMMDDYY.test( tv ) ) return hintDelta + $date;
        if ( rgxISODate.test( tv ) ) return hintDelta + $date;
        if ( rgxHHMM.test( tv ) ) return hintDelta + $time_hh_mm; // eslint-disable-line camelcase
        return token;
      }
      if ( num >= 1200 && num <= 2100 ) return hintDelta + $numeric_year; // eslint-disable-line camelcase
      return hintDelta + $numeric_value; // eslint-disable-line camelcase

    case 'ordinal':
      return hintDelta + $ordinal_value; // eslint-disable-line camelcase

    case 'time':
      return hintDelta + $time; // eslint-disable-line camelcase

    case 'tabCRLF':
      return hintDelta + $tab_crlf; // eslint-disable-line camelcase

    default:
      return token;
  }
};

transformers[ 1 ] = undefined;
transformers[ 2 ] = undefined;
// transformers[ 2 ] = ( token, cache ) => ( console.log( cache.value( token ) ) );

module.exports = transformers;
