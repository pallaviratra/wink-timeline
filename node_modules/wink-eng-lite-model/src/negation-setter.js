var setter = function ( px, dd, constants, search ) {
  let k = 0; // Index into `px`.
  while ( k < px.length ) {
    if ( px[ k ][ 2 ] === '2' ) {
      k += 1;
    } else {
      // Start Negation From.
      const snf = px[ k ][ 1 ] + 1;
      // Terminate Negation At. Assume it to be end-of-sentence.
      let tna = dd.sentences[ search( px[ k ][ 1 ], dd.sentences ) ][ 1 ];
      // Move to next `px`; it can be either another negation or termination.
      // In both cases, we are goint to mark negation upto it.
      k += 1;
      if ( k < px.length ) {
        tna = ( tna < px[ k ][ 0 ] ) ? tna : px[ k ][ 0 ];
      } else {
        // Otherwise mark everything upto the end-of-sentence.
        tna += 1;
      }
      // Flag negated tokens, if any.
      for ( let i = snf; i < tna; i += 1 ) {
        dd.tokens[ ( i * constants.tkSize ) + 3 ] = constants.negationFlag;
      }
    }
  } // while

}; // setter()

module.exports = setter;
