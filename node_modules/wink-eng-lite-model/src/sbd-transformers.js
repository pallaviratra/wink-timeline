const hintDelta = 1080000;
const $right_spc_amb_qt = 6; // eslint-disable-line camelcase
const $right_amb_qt = 4; // eslint-disable-line camelcase
const $likely_eos = 7; // eslint-disable-line camelcase
const $non_eos = 8; // eslint-disable-line camelcase
const transformers = new Array( 1 );
// Preceeding Spaces Mask â€” TO BE Replaced by the constants.js later.
const psMask = 0xFFFF;
// First Pass
transformers[ 0 ] = function ( token, cache, rawTokens, i ) {
  var mapped = cache.property( token, 'sbdHint' ) || cache.property( rawTokens[ i * 4 ], 'sbdHint' );
  // Check if the `token` is a ambiguous double quote.
  if ( mapped === $right_amb_qt ) { // eslint-disable-line camelcase
    // If so find if it has any preceeding spaces and mapp it accordingly.
    mapped = ( rawTokens[ ( i * 4 ) + 1 ] & psMask ) ? $right_spc_amb_qt : $right_amb_qt;  // eslint-disable-line no-bitwise, camelcase
  }
  // If mapped, add the hint delta offset and return.
  if ( mapped ) return mapped + hintDelta;

  if ( cache.property( token, 'isAbbrev' ) ) {
    return ( ( cache.value( token ).length === 2 ) ? $non_eos : $likely_eos ) + hintDelta; // eslint-disable-line camelcase
  }
  // Otherwise return the incoming `token` as-is.
  return token;
};

// transformers[ 0 ] = undefined;

module.exports = transformers;
