var constants = require( './constants.js' );
var caseMap = [ 'other', 'lowerCase', 'upperCase', 'titleCase' ];

// Size of a single token.
var tkSize = constants.tkSize;
// Bits reserved for `lemma`.
var bits4lemma = constants.bits4lemma;
// Mask for extracting pos
var posMask = constants.posMask;
// Mask for preceding spaces.
var psMask = constants.psMask;

var its = Object.create( null );

its.case = function ( index, tokens, cache ) {
  return caseMap[ cache.property( tokens[ index * tkSize ], 'lutCase' ) ];
}; // case()

its.hash = function ( index, tokens ) {
  return tokens[ index * tkSize ];
}; // hash()

its.index = function ( index ) {
  return index;
}; // index()

its.negationFlag = function ( index, tokens ) {
  return tokens[ ( index * tkSize ) + 3 ] > 2147483647;
}; // negationFlag()

its.normal = function ( index, tokens, cache ) {
  return (
    ( tokens[ ( index * tkSize ) + 1 ] > 65535 ) ?
      cache.value( cache.nox( tokens[ ( index * tkSize ) + 1 ] ) ) :
      cache.value( cache.normal( tokens[ index * tkSize ] ) )
  );
}; // normal()

its.pos = function ( index, tokens, cache ) {
  return cache.valueOf( 'pos', ( tokens[ ( index * tkSize ) + 2 ] & posMask ) >>> bits4lemma );  // eslint-disable-line no-bitwise
}; // pos()

its.precedingSpaces = function ( index, tokens ) {
  var token = tokens[ ( index * tkSize ) + 1 ];
  var count = token & psMask;  // eslint-disable-line no-bitwise
  return ( ''.padEnd( count ) );
}; // precedingSpaces()

its.prefix = function ( index, tokens, cache ) {
  return cache.property( tokens[ index * tkSize ], 'prefix' );
}; // prefix()

its.shape = function ( index, tokens, cache ) {
  return cache.property( tokens[ index * tkSize ], 'shape' );
}; // shape()

its.suffix = function ( index, tokens, cache ) {
  return cache.property( tokens[ index * tkSize ], 'suffix' );
}; // suffix()

its.tokenType = function ( index, tokens, cache ) {
  return cache.property( tokens[ index * tkSize ], 'tokenType' );
}; // tokenType()

its.value = function ( index, tokens, cache ) {
  return cache.value( tokens[ index * tkSize ] );
}; // value()


module.exports = its;
